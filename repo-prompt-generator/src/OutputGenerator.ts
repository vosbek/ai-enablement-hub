import * as fs from 'fs-extra';
import * as path from 'path';
import { PromptLibrary, GeneratedPrompt, CodebaseAnalysis } from './types';

export class OutputGenerator {
  async generateMarkdown(library: PromptLibrary, outputPath: string): Promise<void> {
    const markdown = this.buildMarkdownContent(library);
    await fs.writeFile(outputPath, markdown, 'utf-8');
  }

  async generateJSON(library: PromptLibrary, outputPath: string): Promise<void> {
    const json = JSON.stringify(library, null, 2);
    await fs.writeFile(outputPath, json, 'utf-8');
  }

  async generateHTML(library: PromptLibrary, outputPath: string): Promise<void> {
    const html = this.buildHTMLContent(library);
    await fs.writeFile(outputPath, html, 'utf-8');
  }

  private buildMarkdownContent(library: PromptLibrary): string {
    const { metadata, analysis, prompts, categories } = library;
    
    return `# AI Prompts for \`${metadata.repoName}\`

Generated on: ${metadata.generatedAt.toLocaleDateString()}
Total Prompts: ${metadata.totalPrompts}
Repository: ${analysis.repoPath}

## 📊 Repository Analysis Summary

${this.generateAnalysisSummary(analysis)}

---

## 🎯 Custom Prompts for Your Codebase

${this.generatePromptSections(categories)}

---

## 🚀 How to Use These Prompts

### Step-by-Step Instructions:
1. **Copy the prompt** that matches your current task
2. **Replace placeholders** (text in [BRACKETS]) with your specific requirements/code
3. **Open GitHub Copilot Chat** by pressing \`Ctrl+Shift+I\` (or \`Cmd+Shift+I\` on Mac)
4. **Paste and execute** the customized prompt

### When to Use Each Prompt:
- **Planning prompts**: Start of new features or major changes
- **Implementation prompts**: During active coding sessions
- **Testing prompts**: When writing tests or ensuring coverage
- **Review prompts**: Before code reviews or merges
- **Deployment prompts**: When preparing for production releases

### Pro Tips:
- 📝 **Be specific**: Replace placeholders with actual requirements and code
- 🔄 **Iterate**: Use multiple prompts for complex features
- 📚 **Reference examples**: The real code examples are your best guide
- 🤝 **Share with team**: These prompts work for all team members

---

## 📈 Insights and Recommendations

### Strengths
${analysis.insights.strengths.map(s => `- ${s}`).join('\n')}

### Improvement Opportunities
${analysis.insights.improvements.map(i => `- ${i}`).join('\n')}

### AI Opportunities
${analysis.insights.opportunities.map(o => `- ${o}`).join('\n')}

### Risk Areas
${analysis.insights.risks.map(r => `- ${r}`).join('\n')}

---

*Generated by Repository Prompt Generator v${metadata.version}*
*Need help? Contact your AI Enablement team*
`;
  }

  private generateAnalysisSummary(analysis: CodebaseAnalysis): string {
    const mainTech = [
      ...analysis.technologies.languages,
      ...analysis.technologies.frameworks
    ].sort((a, b) => b.confidence - a.confidence).slice(0, 5);

    return `- **Primary Languages**: ${analysis.technologies.languages.map(l => l.name).join(', ')}
- **Frameworks**: ${analysis.technologies.frameworks.map(f => f.name).join(', ') || 'None detected'}
- **Project Type**: ${analysis.structure.projectType}
- **Architecture**: ${analysis.structure.architecture}
- **Package Manager**: ${analysis.structure.packageManager}
- **Test Frameworks**: ${analysis.structure.testFrameworks.join(', ') || 'None detected'}
- **Build Tools**: ${analysis.structure.buildSystem.join(', ') || 'None detected'}
- **Code Quality Score**: ${Math.round(analysis.quality.maintainabilityIndex)}/100
- **Documentation**: ${analysis.structure.documentation}
- **Key Patterns**: ${analysis.patterns.slice(0, 5).map(p => p.name).join(', ')}`;
  }

  private generatePromptSections(categories: any): string {
    const sections = [];

    // Planning Phase
    if (categories.planning.length > 0) {
      sections.push(this.generatePhaseSection('Planning', '🎯', categories.planning, 
        'Use these prompts when starting new features, analyzing requirements, or planning major changes.'));
    }

    // Design Phase
    if (categories.design.length > 0) {
      sections.push(this.generatePhaseSection('Design', '🏗️', categories.design,
        'Use these prompts when designing architecture, APIs, or system components.'));
    }

    // Implementation Phase
    if (categories.implementation.length > 0) {
      sections.push(this.generatePhaseSection('Implementation', '⚡', categories.implementation,
        'Use these prompts during active development and coding sessions.'));
    }

    // Testing Phase
    if (categories.testing.length > 0) {
      sections.push(this.generatePhaseSection('Testing', '🧪', categories.testing,
        'Use these prompts when writing tests, debugging, or ensuring code quality.'));
    }

    // Review Phase
    if (categories.review.length > 0) {
      sections.push(this.generatePhaseSection('Review', '🔍', categories.review,
        'Use these prompts for code reviews, security audits, and quality assessments.'));
    }

    // Deployment Phase
    if (categories.deployment.length > 0) {
      sections.push(this.generatePhaseSection('Deployment', '🚀', categories.deployment,
        'Use these prompts when preparing for production deployment and DevOps tasks.'));
    }

    // Maintenance Phase
    if (categories.maintenance.length > 0) {
      sections.push(this.generatePhaseSection('Maintenance', '🔧', categories.maintenance,
        'Use these prompts for optimization, refactoring, and ongoing maintenance.'));
    }

    // Documentation Phase
    if (categories.documentation.length > 0) {
      sections.push(this.generatePhaseSection('Documentation', '📚', categories.documentation,
        'Use these prompts for creating and maintaining project documentation.'));
    }

    return sections.join('\n\n');
  }

  private generatePhaseSection(title: string, emoji: string, prompts: GeneratedPrompt[], description: string): string {
    const promptsMarkdown = prompts.map((prompt, index) => {
      return `### ${index + 1}. ${prompt.title}

**When to use**: ${prompt.usage.when}
**Complexity**: ${prompt.complexity} | **Estimated time**: ${prompt.estimatedTimeToComplete}

${prompt.description}

#### Real Examples from Your Codebase:
${prompt.context.realExamples.length > 0 
  ? prompt.context.realExamples.slice(0, 2).map(ex => `- **${ex.title}**: \`${ex.filePath}\``).join('\n')
  : '- Examples will be extracted from your code patterns'
}

#### Prompt Template:
\`\`\`
${prompt.template}
\`\`\`

#### Usage Triggers:
${prompt.usage.triggers.map(t => `- ${t}`).join('\n')}

#### Expected Outcome:
${prompt.usage.expectedOutcome}

---`;
    }).join('\n\n');

    return `## ${emoji} ${title} Phase

${description}

${promptsMarkdown}`;
  }

  private buildHTMLContent(library: PromptLibrary): string {
    const { metadata, analysis, prompts } = library;
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Prompts for ${metadata.repoName}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f7fa;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            text-align: center;
        }
        .header h1 {
            margin: 0 0 1rem 0;
            font-size: 2.5rem;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }
        .stat {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }
        .stat-number {
            font-size: 1.5rem;
            font-weight: bold;
            display: block;
        }
        .analysis-summary {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .prompts-container {
            display: grid;
            gap: 2rem;
        }
        .prompt-card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #667eea;
        }
        .prompt-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .prompt-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            margin: 0;
        }
        .prompt-meta {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
            flex-wrap: wrap;
        }
        .meta-tag {
            background: #e2e8f0;
            color: #4a5568;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        .meta-tag.complexity-intermediate { background: #fed7d7; color: #c53030; }
        .meta-tag.complexity-advanced { background: #fbb6ce; color: #97266d; }
        .meta-tag.complexity-beginner { background: #c6f6d5; color: #2f855a; }
        .prompt-template {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem;
            white-space: pre-wrap;
            overflow-x: auto;
        }
        .examples {
            margin: 1rem 0;
        }
        .example-item {
            background: #f0fff4;
            border: 1px solid #9ae6b4;
            border-radius: 6px;
            padding: 0.75rem;
            margin: 0.5rem 0;
            font-family: monospace;
            font-size: 0.875rem;
        }
        .copy-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            margin-top: 1rem;
        }
        .copy-btn:hover {
            background: #5a67d8;
        }
        .usage-section {
            background: #f0f9ff;
            border: 1px solid #bae6fd;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        .phase-section {
            margin: 3rem 0;
        }
        .phase-title {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #2d3748;
        }
        .instructions {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin: 2rem 0;
        }
        .instructions h3 {
            margin-top: 0;
        }
        .instructions ol {
            font-size: 1.1rem;
        }
        .search-box {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            margin-bottom: 2rem;
        }
        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🧠 AI Prompts for ${metadata.repoName}</h1>
        <p>Custom prompts generated from your codebase patterns</p>
        <div class="stats">
            <div class="stat">
                <span class="stat-number">${metadata.totalPrompts}</span>
                <span>Custom Prompts</span>
            </div>
            <div class="stat">
                <span class="stat-number">${analysis.structure.projectType}</span>
                <span>Project Type</span>
            </div>
            <div class="stat">
                <span class="stat-number">${Math.round(analysis.quality.maintainabilityIndex)}/100</span>
                <span>Quality Score</span>
            </div>
            <div class="stat">
                <span class="stat-number">${analysis.patterns.length}</span>
                <span>Patterns Found</span>
            </div>
        </div>
    </div>

    <div class="analysis-summary">
        <h2>📊 Repository Analysis</h2>
        ${this.generateHTMLAnalysisSummary(analysis)}
    </div>

    <div class="instructions">
        <h3>🚀 How to Use These Prompts</h3>
        <ol>
            <li><strong>Find the prompt</strong> that matches your current task</li>
            <li><strong>Click "Copy Prompt"</strong> to copy the template to your clipboard</li>
            <li><strong>Open GitHub Copilot Chat</strong> by pressing <code>Ctrl+Shift+I</code> (or <code>Cmd+Shift+I</code> on Mac)</li>
            <li><strong>Paste the prompt</strong> and replace [PLACEHOLDERS] with your specific requirements</li>
            <li><strong>Execute and iterate</strong> - use the AI's response to refine your approach</li>
        </ol>
        <p><strong>💡 Pro tip:</strong> These prompts include real examples from your codebase, making them incredibly contextual and effective!</p>
    </div>

    <input type="text" class="search-box" id="searchBox" placeholder="Search prompts..." onkeyup="filterPrompts()">

    <div class="prompts-container" id="promptsContainer">
        ${this.generateHTMLPrompts(prompts)}
    </div>

    <script>
        function copyPrompt(promptId, template) {
            navigator.clipboard.writeText(template).then(() => {
                const btn = document.getElementById('copy-' + promptId);
                const originalText = btn.textContent;
                btn.textContent = '✅ Copied!';
                btn.style.background = '#22c55e';
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.style.background = '#667eea';
                }, 2000);
            });
        }

        function filterPrompts() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase();
            const promptCards = document.querySelectorAll('.prompt-card');
            
            promptCards.forEach(card => {
                const title = card.querySelector('.prompt-title').textContent.toLowerCase();
                const description = card.querySelector('.prompt-description').textContent.toLowerCase();
                const template = card.querySelector('.prompt-template').textContent.toLowerCase();
                
                if (title.includes(searchTerm) || description.includes(searchTerm) || template.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }
    </script>
</body>
</html>`;
  }

  private generateHTMLAnalysisSummary(analysis: CodebaseAnalysis): string {
    return `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; margin: 1rem 0;">
            <div>
                <h4>🛠️ Technology Stack</h4>
                <ul>
                    <li><strong>Languages:</strong> ${analysis.technologies.languages.map(l => l.name).join(', ')}</li>
                    <li><strong>Frameworks:</strong> ${analysis.technologies.frameworks.map(f => f.name).join(', ') || 'None'}</li>
                    <li><strong>Databases:</strong> ${analysis.technologies.databases.map(d => d.name).join(', ') || 'None'}</li>
                </ul>
            </div>
            <div>
                <h4>🏗️ Project Structure</h4>
                <ul>
                    <li><strong>Type:</strong> ${analysis.structure.projectType}</li>
                    <li><strong>Architecture:</strong> ${analysis.structure.architecture}</li>
                    <li><strong>Package Manager:</strong> ${analysis.structure.packageManager}</li>
                </ul>
            </div>
            <div>
                <h4>📈 Quality Metrics</h4>
                <ul>
                    <li><strong>Maintainability:</strong> ${Math.round(analysis.quality.maintainabilityIndex)}/100</li>
                    <li><strong>Comment Ratio:</strong> ${Math.round(analysis.quality.commentRatio * 100)}%</li>
                    <li><strong>Documentation:</strong> ${analysis.structure.documentation}</li>
                </ul>
            </div>
        </div>
    `;
  }

  private generateHTMLPrompts(prompts: GeneratedPrompt[]): string {
    return prompts.map((prompt, index) => `
        <div class="prompt-card">
            <div class="prompt-header">
                <h3 class="prompt-title">${prompt.title}</h3>
            </div>
            <div class="prompt-meta">
                <span class="meta-tag">📍 ${prompt.phase}</span>
                <span class="meta-tag complexity-${prompt.complexity}">🎯 ${prompt.complexity}</span>
                <span class="meta-tag">⏱️ ${prompt.estimatedTimeToComplete}</span>
            </div>
            <p class="prompt-description">${prompt.description}</p>
            
            <div class="usage-section">
                <strong>When to use:</strong> ${prompt.usage.when}
                <br><strong>Expected outcome:</strong> ${prompt.usage.expectedOutcome}
            </div>

            ${prompt.context.realExamples.length > 0 ? `
            <div class="examples">
                <h4>📝 Real Examples from Your Codebase:</h4>
                ${prompt.context.realExamples.slice(0, 2).map(ex => 
                    `<div class="example-item"><strong>${ex.title}</strong>: ${ex.filePath}</div>`
                ).join('')}
            </div>
            ` : ''}

            <h4>🎯 Prompt Template:</h4>
            <div class="prompt-template">${this.escapeHtml(prompt.template)}</div>
            
            <button class="copy-btn" id="copy-${index}" onclick="copyPrompt('${index}', ${JSON.stringify(prompt.template).replace(/'/g, '&#39;')})">
                📋 Copy Prompt
            </button>
        </div>
    `).join('');
  }

  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}